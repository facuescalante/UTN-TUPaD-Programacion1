# -*- coding: utf-8 -*-
"""Práctico 5: Listas Juan Facundo Escalante DNI: 24927651.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19eH6Y9FJ6kv8GTySWBsefEcUYJcGN39E

# Práctico 5: Listas
## Juan Facundo Escalante DNI: 24927651

**1.Crear una lista con las notas de 10 estudiantes.**

• Mostrar la lista completa.

• Calcular y mostrar el promedio.

• Indicar la nota más alta y la más baja.
"""

lista_estudiantes = [2,8,9,7,6,5,8,10,9,7.5]             #creo lista

promedio = sum(lista_estudiantes)/len(lista_estudiantes) #saco promedio sumando toda la lista y divido por cantidad
nota_min = min(lista_estudiantes)                        #minima nota
nota_max = max(lista_estudiantes)                        #max nota

print(f"Lista completa: {lista_estudiantes}")            #muestro la lista
print(f"Promedio: {promedio}")                           #muestro promedio
print(f"Nota mínima: {nota_min}")                        #muestro nota min
print(f"Nota máxima: {nota_max}")                        #muestro nota max

"""**2) Pedir al usuario que cargue 5 productos en una lista.**

• Mostrar la lista ordenada alfabéticamente. Investigue el uso del método sorted().

• Preguntar al usuario qué producto desea eliminar y actualizar la lista.
"""

lista_productos = []                          #creo lista

for i in range(5):                              #ciclo for cinco veces
    producto = input("Ingrese un producto: ")     #cada iteracion pide nuevo producto
    lista_productos.append(producto)              #guarda en lista_productos
lista_ordenada = sorted(lista_productos)          #guarda lista ordenada

print("Lista desordenada:  ",lista_productos)      #imprime lista original
print("Lista ordenada: ",lista_ordenada)          #imprime lista ordenada

eliminar_producto = input("Ingrese el producto a eliminar: ")  #pide eliminar un producto

if eliminar_producto in lista_ordenada:               #verifica si el producto esta en la lista
    lista_ordenada.remove(eliminar_producto)
    print(f'El producto "{eliminar_producto}" fue eliminado con éxito.') #mensaje de exito
else:
    print("El producto ingresado no esta en la lista.")  #mensaje que no existe producto

print("Lista actualizada : ", lista_ordenada)   #lista acualizada final

"""**3) Generar una lista con 15 números enteros al azar entre 1 y 100**.

• Crear una lista con los pares y otra con los impares.

• Mostrar cuántos números tiene cada lista.
"""

import random                     #importo libreria random para nros aleatorios
lista_pares = []                  #creo lista par
lista_impares = []                #creo lista impar
nro_random = [random.randint(1,100) for i in range(15)] #genera quince nros random entre uno y cien
for i in nro_random:               #ciclo for para recorrer la lista
    if i % 2 == 0:                 #si el resrto es cero
        lista_pares.append(i)       #lo agrega ala lista par
    else:                            #sino
        lista_impares.append(i)      #lo agrega a la impar

print(f"Lista de números aleatorios: {nro_random}")  #muestra los nros random
print(f"Lista de números pares: {lista_pares}")       #muestra los pares
print(f"Lista de números impares: {lista_impares}")    #muestra los impares
print(f"Cantidad de números pares: {len(lista_pares)}") #muestra cantidads de pares
print(f"Cantidad de números impares: {len(lista_impares)}")  #muestra cantidad de impares

"""**4) Dada una lista con valores repetidos:**

• Crear una nueva lista sin elementos repetidos.

datos = [1,3,5,3,7,1,9,5,3]

• Mostrar el resultado.
"""

datos = [1,3,5,3,7,1,9,5,3]           #lista dada
lista_nueva = []                      #creo lista nueva

for i in datos:                       #ciclo for para recorrer la lista
    if i not in lista_nueva:          #si el elemento no esta en la lista nueva
        lista_nueva.append(i)         #lo agrega a lista nueva

print(f"Lista original: {datos}")      #muestra lista original
print(f"Lista sin repetidos: {lista_nueva}")    #muestra lista nueva

"""**5) Crear una lista con los nombres de 8 estudiantes presentes en clase.**

• Preguntar al usuario si quiere agregar un nuevo estudiante o eliminar uno existente.

• Mostrar la lista final actualizada.

nombre_alumnos = ["Mario", "Jose", "Leonel", "Maria", "Mirta", "Susana", "Alicia", "Nestor"] #creo lista nombres

print("Lista de alumnos: ", nombre_alumnos)        #muestra lista original
print("¿Qué desea hacer?")                        #pregunto
print("1 - Agregar un nuevo alumno")              #uno para agregar
print("2 - Eliminar un alumno existente")         #dos para eliminar
opcion = input("Ingrese 1 o 2: ")                 #opcion a elejir


if opcion == "1":                                 #si elije opcion uno
    nuevo_alumno = input("Ingrese el nombre del nuevo alumno: ") #pide nombre   
    nombre_alumnos.append(nuevo_alumno)                          #agrega nuevo alumno a la lista al final
    print("Lista actualizada: ", nombre_alumnos)              #muestra lista actualizada

elif opcion == "2":                               #si elije opcion dos                      
    eliminar_alumno = input("Ingrese el nombre del alumno a eliminar: ") #pide nombre                                                                                                                                                                                                     
    encontrado = False                                                   #inicializo en falso         
    for alumno in nombre_alumnos:                                        #ciclo for para recorrer la lista  
        if alumno.lower() == eliminar_alumno.lower():                    #si el alumno esta en la lista
            nombre_alumnos.remove(alumno)                                #lo elimina                                                                           
            encontrado = True                                            #cambia a verdadero                                                    
            print(f'El alumno "{alumno}" fue eliminado con éxito.')      #muestra mensaje exito             
            break                                                       #sale del bucle       
    if not encontrado:                                                  #si no encontro
        print(f'El alumno "{eliminar_alumno}" no se encuentra en la lista.')  #muestra bo encontrado  

    print("Lista actualizada: ", nombre_alumnos)                              #muestra lista actualizada                                                                                            
else:
    print("Opción inválida.")                                              #muestra mensaje de error

**6) Dada una lista con 7 números, rotar todos los elementos una posición hacia la derecha (el
último pasa a ser el primero).**
"""

lista_numeros = [1,2,3,4,5,6,7] #creo lista
lista_invertida = lista_numeros[::-1] #invierto lista con operador slicing
print(lista_numeros)                  #muestro original
print(lista_invertida)                #muestro invertido

"""**7) Crear una matriz (lista anidada) de 7x2 con las temperaturas mínimas y máximas de una
semana.**

• Calcular el promedio de las mínimas y el de las máximas.

• Mostrar en qué día se registró la mayor amplitud térmica.
"""

temperatura = [[12,22],[13,25],[10,21],[14,26],[10,19],[15,30],[9,19]]       #lista inicial anidada

promedio_min = sum(temperatura[i][0] for i in range(len(temperatura)))/len(temperatura)   #calculo promedio min
promedio_max = sum(temperatura[i][1] for i in range(len(temperatura)))/len(temperatura)   #calculo promedio max

print(f"Promedio de temperaturas mínimas: {promedio_min}")                                #muestro promedio min
print(f"Promedio de temperaturas máximas: {promedio_max}")                                #muestro promedio max

amplitud = [dia[1] - dia[0] for dia in temperatura]                                       #crea lista amplitud
mayor_amplitud = max(amplitud)                                                            #busca mayor valor

dia_mayor_amplitud = amplitud.index(mayor_amplitud)                                       #busca el indice del mayor valor
dia_semana = ["lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"]   #dia correspondiente

print(f"Mayor amplitud térmica: {mayor_amplitud}")                                        #muestra mayor amplitud
print(f"Dia de mayor amplitud termica: {dia_semana[dia_mayor_amplitud]}")                 #muestra dia

"""**8) Crear una matriz con las notas de 5 estudiantes en 3 materias.**

• Mostrar el promedio de cada estudiante.

• Mostrar el promedio de cada materia.
"""

notas = [[6,7,8],[7,7,9],[9,7,10],[10,8,9],[9,8,7]]                              #defino lista anidada
promedio_estudiante = [sum(notas[i])/len(notas[i]) for i in range(len(notas))]   #promedio cada estudiante
promedio_materia = [sum(notas[i][j] for i in range(len(notas)))/len(notas) for j in range(len(notas[0]))]   #promedio notas

print("Promedios de cada estudiante: ", promedio_estudiante)                     #muestra promedio de cada estudiante
print("Promedios de cada materia: ", promedio_materia)                           #muestra promedio de cada materia

"""**9) Representar un tablero de Ta-Te-Ti como una lista de listas (3x3).**

• Inicializarlo con guiones "-" representando casillas vacías.

• Permitir que dos jugadores ingresen posiciones (fila, columna) para colocar "X" o "O".

• Mostrar el tablero después de cada jugada.
"""

tablero = [["-","-","-"],["-","-","-"],["-","-","-"]]                 #difino lista anidada 3x3
jugador1 = "X"                                                       #defino jugadores
jugador2 = "O"                                                       #defino jugadores

jugada = 0                                                           #inicializo jugada en cero
while jugada < 9:                                                    #
    print("Tablero actual:")
    for fila in tablero:
        print(fila)

    if jugada % 2 == 0:
        jugador = jugador1
    else:
        jugador = jugador2

    print(f"Turno del jugador {jugador}")

    pedir_jugada = True
    while pedir_jugada:
        fila = int(input("Ingrese la fila (0, 1 o 2): "))
        columna = int(input("Ingrese la columna (0, 1 o 2): "))
        if 0 <= fila < 3 and 0 <= columna < 3 and tablero[fila][columna] == "-":
            tablero[fila][columna] = jugador
            pedir_jugada = False
        else:
            print("Jugada inválida. Intente nuevamente.")

    jugada += 1

print("Tablero final:")
for fila in tablero:
    print(fila)

"""**10) Una tienda registra las ventas de 4 productos durante 7 días, en una matriz de 4x7.**

• Mostrar el total vendido por cada producto.

• Mostrar el día con mayores ventas totales.

• Indicar cuál fue el producto más vendido en la semana.
"""

ventas = [[4,5,7,2,9,6,4],[2,3,8,9,4,7,6],[1,2,5,8,7,9,4],[10,2,8,7,6,4,4]]

productos = ["queso", "fideos", "aceite", "yerba"]
dias = ["lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"]

print("Total vendido por cada producto:")
for i in range(len(productos)):
    total = sum(ventas[i])
    print(f"{productos[i]}: {total} unidades")

total_por_dia = [sum(ventas[i][j] for i in range(len(ventas))) for j in range(len(ventas[0]))]  #total vendido por día
print("\nTotal vendido por cada dia:")
for i in range(len(dias)):
    print(f"{dias[i]}: {total_por_dia[i]} unidades")

producto_totales = [sum(ventas[i]) for i in range(len(ventas))]         #producto con mayores ventas totales
producto_mas_vendido = producto_totales.index(max(producto_totales))
print(f"\nProducto mas vendido: {productos[producto_mas_vendido]} ({producto_totales[producto_mas_vendido]} unidades)")

dia_mas_vendido = total_por_dia.index(max(total_por_dia))               #día con más ventas
print(f"Dia con mayores ventas: {dias[dia_mas_vendido]} ({total_por_dia[dia_mas_vendido]} unidades)")